declare module 'gameboy' {
    class GameBoyCore {
        constructor(canvas: any, ROMImage: any, opts: any);
        opts: {};
        canvas: any;
        drawContext: any;
        ROMImage: any;
        ROMImageIsString: boolean;
        registerA: number;
        FZero: boolean;
        FSubtract: boolean;
        FHalfCarry: boolean;
        FCarry: boolean;
        registerB: number;
        registerC: number;
        registerD: number;
        registerE: number;
        registersHL: number;
        stackPointer: number;
        programCounter: number;
        CPUCyclesTotal: number;
        CPUCyclesTotalBase: number;
        CPUCyclesTotalCurrent: number;
        CPUCyclesTotalRoundoff: number;
        baseCPUCyclesPerIteration: number;
        remainingClocks: number;
        inBootstrap: boolean;
        usedBootROM: boolean;
        usedGBCBootROM: boolean;
        halt: boolean;
        skipPCIncrement: boolean;
        stopEmulator: number;
        IME: boolean;
        IRQLineMatched: number;
        interruptsRequested: number;
        interruptsEnabled: number;
        hdmaRunning: boolean;
        CPUTicks: number;
        doubleSpeedShifter: number;
        JoyPad: number;
        CPUStopped: boolean;
        memoryReader: any[];
        memoryWriter: any[];
        memoryHighReader: any[];
        memoryHighWriter: any[];
        ROM: any[];
        memory: any[];
        MBCRam: any[];
        VRAM: any[];
        GBCMemory: any[];
        MBC1Mode: boolean;
        MBCRAMBanksEnabled: boolean;
        currMBCRAMBank: number;
        currMBCRAMBankPosition: number;
        cGBC: boolean;
        gbcRamBank: number;
        gbcRamBankPosition: number;
        gbcRamBankPositionECHO: number;
        RAMBanks: number[];
        ROMBank1offs: number;
        currentROMBank: number;
        cartridgeType: number;
        name: string;
        gameCode: string;
        fromSaveState: boolean;
        savedStateFileName: string;
        STATTracker: number;
        modeSTAT: number;
        spriteCount: number;
        LYCMatchTriggerSTAT: boolean;
        mode2TriggerSTAT: boolean;
        mode1TriggerSTAT: boolean;
        mode0TriggerSTAT: boolean;
        LCDisOn: boolean;
        LINECONTROL: any[];
        DISPLAYOFFCONTROL: ((parentObj: any) => void)[];
        LCDCONTROL: any[];
        RTCisLatched: boolean;
        latchedSeconds: number;
        latchedMinutes: number;
        latchedHours: number;
        latchedLDays: number;
        latchedHDays: number;
        RTCSeconds: number;
        RTCMinutes: number;
        RTCHours: number;
        RTCDays: number;
        RTCDayOverFlow: boolean;
        RTCHALT: boolean;
        highX: number;
        lowX: number;
        highY: number;
        lowY: number;
        audioHandle: any;
        numSamplesTotal: number;
        dutyLookup: boolean[][];
        bufferContainAmount: number;
        LSFR15Table: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        LSFR7Table: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        noiseSampleTable: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        soundMasterEnabled: boolean;
        channel3PCM: any;
        VinLeftChannelMasterVolume: number;
        VinRightChannelMasterVolume: number;
        leftChannel1: boolean;
        leftChannel2: boolean;
        leftChannel3: boolean;
        leftChannel4: boolean;
        rightChannel1: boolean;
        rightChannel2: boolean;
        rightChannel3: boolean;
        rightChannel4: boolean;
        audioClocksUntilNextEvent: number;
        audioClocksUntilNextEventCounter: number;
        channel1currentSampleLeft: number;
        channel1currentSampleRight: number;
        channel2currentSampleLeft: number;
        channel2currentSampleRight: number;
        channel3currentSampleLeft: number;
        channel3currentSampleRight: number;
        channel4currentSampleLeft: number;
        channel4currentSampleRight: number;
        channel1currentSampleLeftSecondary: number;
        channel1currentSampleRightSecondary: number;
        channel2currentSampleLeftSecondary: number;
        channel2currentSampleRightSecondary: number;
        channel3currentSampleLeftSecondary: number;
        channel3currentSampleRightSecondary: number;
        channel4currentSampleLeftSecondary: number;
        channel4currentSampleRightSecondary: number;
        channel1currentSampleLeftTrimary: number;
        channel1currentSampleRightTrimary: number;
        channel2currentSampleLeftTrimary: number;
        channel2currentSampleRightTrimary: number;
        mixerOutputCache: number;
        emulatorSpeed: number;
        audioTicks: number;
        audioIndex: number;
        downsampleInput: number;
        audioDestinationPosition: number;
        rollover: number;
        emulatorTicks: number;
        DIVTicks: number;
        LCDTicks: number;
        timerTicks: number;
        TIMAEnabled: boolean;
        TACClocker: number;
        serialTimer: number;
        serialShiftTimer: number;
        serialShiftTimerAllocated: number;
        IRQEnableDelay: number;
        lastIteration: number;
        firstIteration: number;
        iterations: number;
        actualScanLine: number;
        lastUnrenderedLine: number;
        queuedScanLines: number;
        totalLinesPassed: number;
        haltPostClocks: number;
        cMBC1: boolean;
        cMBC2: boolean;
        cMBC3: boolean;
        cMBC5: boolean;
        cMBC7: boolean;
        cSRAM: boolean;
        cMMMO1: boolean;
        cRUMBLE: boolean;
        cCamera: boolean;
        cTAMA5: boolean;
        cHuC3: boolean;
        cHuC1: boolean;
        cTIMER: boolean;
        ROMBanks: number[];
        numRAMBanks: number;
        currVRAMBank: number;
        backgroundX: number;
        backgroundY: number;
        gfxWindowDisplay: boolean;
        gfxSpriteShow: boolean;
        gfxSpriteNormalHeight: boolean;
        bgEnabled: boolean;
        BGPriorityEnabled: boolean;
        gfxWindowCHRBankPosition: number;
        gfxBackgroundCHRBankPosition: number;
        gfxBackgroundBankOffset: number;
        windowY: number;
        windowX: number;
        drewBlank: number;
        drewFrame: boolean;
        midScanlineOffset: number;
        pixelEnd: number;
        currentX: number;
        BGCHRBank1: any;
        BGCHRBank2: any;
        BGCHRCurrentBank: any;
        tileCache: (any[] | Int8Array | Uint8Array | Int32Array | Float32Array)[];
        colors: number[];
        OBJPalette: any;
        BGPalette: any;
        gbcOBJRawPalette: any;
        gbcBGRawPalette: any;
        gbOBJPalette: any;
        gbBGPalette: any;
        gbcOBJPalette: any;
        gbcBGPalette: any;
        gbBGColorizedPalette: any;
        gbOBJColorizedPalette: any;
        cachedBGPaletteConversion: any;
        cachedOBJPaletteConversion: any;
        updateGBBGPalette: (data: any) => void;
        updateGBOBJPalette: (index: any, data: any) => void;
        colorizedGBPalettes: boolean;
        BGLayerRender: (scanlineToRender: any) => void;
        WindowLayerRender: (scanlineToRender: any) => void;
        SpriteLayerRender: (scanlineToRender: any) => void;
        frameBuffer: any[];
        swizzledFrame: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        canvasBuffer: any;
        pixelStart: number;
        onscreenWidth: number;
        offscreenWidth: number;
        onscreenHeight: number;
        offscreenHeight: number;
        offscreenRGBCount: number;
        resizePathClear: boolean;
        GBBOOTROM: any[];
        GBCBOOTROM: any[];
        ffxxDump: number[];
        OPCODE: ((parentObj: any) => void)[];
        CBOPCODE: ((parentObj: any) => void)[];
        TICKTable: any;
        SecondaryTICKTable: any;
        saveSRAMState(): any;
        saveRTCState(): (number | boolean)[];
        saveState(): any[];
        returnFromState(returnedFrom: any): void;
        ROMBankEdge: number;
        channel1FrequencyTracker: any;
        channel1FrequencyCounter: any;
        channel1totalLength: any;
        channel1envelopeVolume: any;
        channel1envelopeType: any;
        channel1envelopeSweeps: any;
        channel1envelopeSweepsLast: any;
        channel1consecutive: any;
        channel1frequency: any;
        channel1SweepFault: any;
        channel1ShadowFrequency: any;
        channel1timeSweep: any;
        channel1lastTimeSweep: any;
        channel1Swept: any;
        channel1frequencySweepDivider: any;
        channel1decreaseSweep: any;
        channel2FrequencyTracker: any;
        channel2FrequencyCounter: any;
        channel2totalLength: any;
        channel2envelopeVolume: any;
        channel2envelopeType: any;
        channel2envelopeSweeps: any;
        channel2envelopeSweepsLast: any;
        channel2consecutive: any;
        channel2frequency: any;
        channel3canPlay: any;
        channel3totalLength: any;
        channel3patternType: any;
        channel3frequency: any;
        channel3consecutive: any;
        channel4FrequencyPeriod: any;
        channel4lastSampleLookup: any;
        channel4totalLength: any;
        channel4envelopeVolume: any;
        channel4currentVolume: any;
        channel4envelopeType: any;
        channel4envelopeSweeps: any;
        channel4envelopeSweepsLast: any;
        channel4consecutive: any;
        channel4BitRange: any;
        channel1DutyTracker: any;
        channel1CachedDuty: any;
        channel2DutyTracker: any;
        channel2CachedDuty: any;
        channel1Enabled: any;
        channel2Enabled: any;
        channel3Enabled: any;
        channel4Enabled: any;
        sequencerClocks: any;
        sequencePosition: any;
        channel3Counter: any;
        channel4Counter: any;
        cachedChannel3Sample: any;
        cachedChannel4Sample: any;
        channel3FrequencyPeriod: any;
        channel3lastSampleLookup: any;
        channel4VolumeShifter: number;
        returnFromRTCState(): void;
        start(): void;
        initMemory(): void;
        generateCacheArray(tileAmount: any): (any[] | Int8Array | Uint8Array | Int32Array | Float32Array)[];
        initSkipBootstrap(): void;
        initBootstrap(): void;
        ROMLoad(): void;
        getROMImage(): any;
        interpretCartridge(): void;
        cBATT: boolean;
        numROMBanks: number;
        disableBootROM(): void;
        initializeTiming(): void;
        clocksPerSecond: number;
        setSpeed(speed: any): void;
        setupRAM(): void;
        MBCRAMUtilized(): boolean;
        recomputeDimension(): void;
        initLCD(): void;
        resizer: any;
        canvasOffscreen: any;
        drawContextOffscreen: any;
        drawContextOnscreen: any;
        graphicsBlit(): void;
        JoyPadEvent(key: any, down: any): void;
        GyroEvent(x: any, y: any): void;
        initSound(): void;
        audioResamplerFirstPassFactor: number;
        downSampleInputDivider: number;
        changeVolume(): void;
        initAudioBuffer(): void;
        audioBuffer: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        intializeWhiteNoise(): void;
        audioUnderrunAdjustment(): void;
        initializeAudioStartState(): void;
        channel1canPlay: boolean;
        channel2canPlay: boolean;
        channel4canPlay: boolean;
        outputAudio(): void;
        generateAudio(numSamples: any): void;
        generateAudioFake(numSamples: any): void;
        audioJIT(): void;
        audioComputeSequencer(): void;
        clockAudioLength(): void;
        clockAudioSweep(): void;
        runAudioSweep(): void;
        channel1AudioSweepPerformDummy(): void;
        clockAudioEnvelope(): void;
        computeAudioChannels(): void;
        channel1EnableCheck(): void;
        channel1VolumeEnableCheck(): void;
        channel1OutputLevelCache(): void;
        channel1OutputLevelSecondaryCache(): void;
        channel1OutputLevelTrimaryCache(): void;
        channel2EnableCheck(): void;
        channel2VolumeEnableCheck(): void;
        channel2OutputLevelCache(): void;
        channel2OutputLevelSecondaryCache(): void;
        channel2OutputLevelTrimaryCache(): void;
        channel3EnableCheck(): void;
        channel3OutputLevelCache(): void;
        channel3OutputLevelSecondaryCache(): void;
        channel4EnableCheck(): void;
        channel4VolumeEnableCheck(): void;
        channel4OutputLevelCache(): void;
        channel4OutputLevelSecondaryCache(): void;
        mixerOutputLevelCache(): void;
        channel3UpdateCache(): void;
        channel3WriteRAM(address: any, data: any): void;
        channel4UpdateCache(): void;
        run(): void;
        executeIteration(): void;
        iterationEndRoutine(): void;
        handleSTOP(): void;
        recalculateIterationClockLimit(): void;
        recalculateIterationClockLimitForAudio(audioClocking: any): void;
        scanLineMode2(): void;
        scanLineMode3(): void;
        scanLineMode0(): void;
        clocksUntilLYCMatch(): number;
        clocksUntilMode0(): number;
        updateSpriteCount(line: any): void;
        matchLYC(): void;
        updateCore(): void;
        updateCoreFull(): void;
        initializeLCDController(): void;
        DisplayShowOff(): void;
        executeHDMA(): void;
        clockUpdate(): void;
        prepareFrame(): void;
        requestDraw(): void;
        dispatchDraw(): void;
        processDraw(frameBuffer: any): void;
        swizzleFrameBuffer(): void;
        clearFrameBuffer(): void;
        renderScanLine(scanlineToRender: any): void;
        renderMidScanLine(): void;
        initializeModeSpecificArrays(): void;
        sortBuffer: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        OAMAddressCache: any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
        GBCtoGBModeAdjust(): void;
        renderPathBuild(): void;
        priorityFlaggingPathRebuild(): void;
        initializeReferencesFromSaveState(): void;
        RGBTint(value: any): number;
        getGBCColor(): void;
        updateGBRegularBGPalette(data: any): void;
        updateGBColorizedBGPalette(data: any): void;
        updateGBRegularOBJPalette(index: any, data: any): void;
        updateGBColorizedOBJPalette(index: any, data: any): void;
        updateGBCBGPalette(index: any, data: any): void;
        updateGBCOBJPalette(index: any, data: any): void;
        BGGBLayerRender(scanlineToRender: any): void;
        BGGBCLayerRender(scanlineToRender: any): void;
        BGGBCLayerRenderNoPriorityFlagging(scanlineToRender: any): void;
        WindowGBLayerRender(scanlineToRender: any): void;
        WindowGBCLayerRender(scanlineToRender: any): void;
        WindowGBCLayerRenderNoPriorityFlagging(scanlineToRender: any): void;
        SpriteGBLayerRender(scanlineToRender: any): void;
        findLowestSpriteDrawable(scanlineToRender: any, drawableRange: any): number;
        SpriteGBCLayerRender(scanlineToRender: any): void;
        generateGBTileLine(address: any): void;
        generateGBCTileLineBank1(address: any): void;
        generateGBCTileBank1(vramAddress: any): void;
        generateGBCTileLineBank2(address: any): void;
        generateGBCTileBank2(vramAddress: any): void;
        generateGBOAMTileLine(address: any): void;
        graphicsJIT(): void;
        graphicsJITVBlank(): void;
        graphicsJITScanlineGroup(): void;
        incrementScanLineQueue(): void;
        midScanLineJIT(): void;
        launchIRQ(): void;
        checkIRQMatching(): void;
        calculateHALTPeriod(): void;
        memoryRead(address: any): any;
        memoryHighRead(address: any): any;
        memoryReadJumpCompile(): void;
        memoryReadNormal(parentObj: any, address: any): any;
        memoryHighReadNormal(parentObj: any, address: any): any;
        memoryReadROM(parentObj: any, address: any): any;
        memoryReadMBC(parentObj: any, address: any): any;
        memoryReadMBC7(parentObj: any, address: any): any;
        memoryReadMBC3(parentObj: any, address: any): any;
        memoryReadGBCMemory(parentObj: any, address: any): any;
        memoryReadOAM(parentObj: any, address: any): any;
        memoryReadECHOGBCMemory(parentObj: any, address: any): any;
        memoryReadECHONormal(parentObj: any, address: any): any;
        memoryReadBAD(parentObj: any, address: any): number;
        VRAMDATAReadCGBCPU(parentObj: any, address: any): any;
        VRAMDATAReadDMGCPU(parentObj: any, address: any): any;
        VRAMCHRReadCGBCPU(parentObj: any, address: any): any;
        VRAMCHRReadDMGCPU(parentObj: any, address: any): any;
        setCurrentMBC1ROMBank(): void;
        setCurrentMBC2AND3ROMBank(): void;
        setCurrentMBC5ROMBank(): void;
        memoryWrite(address: any, data: any): void;
        memoryHighWrite(address: any, data: any): void;
        memoryWriteJumpCompile(): void;
        MBCWriteEnable(parentObj: any, address: any, data: any): void;
        MBC1WriteROMBank(parentObj: any, address: any, data: any): void;
        MBC1WriteRAMBank(parentObj: any, address: any, data: any): void;
        MBC1WriteType(parentObj: any, address: any, data: any): void;
        MBC2WriteROMBank(parentObj: any, address: any, data: any): void;
        MBC3WriteROMBank(parentObj: any, address: any, data: any): void;
        MBC3WriteRAMBank(parentObj: any, address: any, data: any): void;
        MBC3WriteRTCLatch(parentObj: any, address: any, data: any): void;
        MBC5WriteROMBankLow(parentObj: any, address: any, data: any): void;
        MBC5WriteROMBankHigh(parentObj: any, address: any, data: any): void;
        MBC5WriteRAMBank(parentObj: any, address: any, data: any): void;
        RUMBLEWriteRAMBank(parentObj: any, address: any, data: any): void;
        HuC3WriteRAMBank(parentObj: any, address: any, data: any): void;
        cartIgnoreWrite(parentObj: any, address: any, data: any): void;
        memoryWriteNormal(parentObj: any, address: any, data: any): void;
        memoryHighWriteNormal(parentObj: any, address: any, data: any): void;
        memoryWriteMBCRAM(parentObj: any, address: any, data: any): void;
        memoryWriteMBC3RAM(parentObj: any, address: any, data: any): void;
        memoryWriteGBCRAM(parentObj: any, address: any, data: any): void;
        memoryWriteOAMRAM(parentObj: any, address: any, data: any): void;
        memoryWriteECHOGBCRAM(parentObj: any, address: any, data: any): void;
        memoryWriteECHONormal(parentObj: any, address: any, data: any): void;
        VRAMGBDATAWrite(parentObj: any, address: any, data: any): void;
        VRAMGBDATAUpperWrite(parentObj: any, address: any, data: any): void;
        VRAMGBCDATAWrite(parentObj: any, address: any, data: any): void;
        VRAMGBCHRMAPWrite(parentObj: any, address: any, data: any): void;
        VRAMGBCCHRMAPWrite(parentObj: any, address: any, data: any): void;
        DMAWrite(tilesToTransfer: any): void;
        registerWriteJumpCompile(): void;
        recompileModelSpecificIOWriteHandling(): void;
        recompileBootIOWriteHandling(): void;
        toTypedArray(baseArray: any, memtype: any): any;
        fromTypedArray(baseArray: any): any;
        getTypedArray(length: any, defaultValue: any, numberType: any): any[] | Int8Array | Uint8Array | Int32Array | Float32Array;
    }
    export = GameBoyCore;
}